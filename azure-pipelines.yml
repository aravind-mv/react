trigger:
  branches:
    include:
      - main  # Specify the branch to monitor for changes

pool:
  name: 'Default'  # Using the named pool 'Default'

variables:
  dockerImageName: 'my-react-app'
  dockerFilePath: 'Dockerfile'
  imageTarFile: 'my-react-app.tar'
  serverPath: '/home/azuser/docker-image.tar'
  SERVER_IP: '20.9.143.123'  # Replace with your server IP
  SSH_USER: 'azuser'  # Replace with your SSH username
  SSH_PASSWORD: 'azqhpassword123'  # Directly included SSH password
  TARGET_URL: 'http://20.9.143.123:3001'  # Replace with your target URL for OWASP ZAP
  HTML_REPORT_NAME: 'zap-report.html'
  XML_REPORT_NAME: 'zap-report.xml'
  nmapTarget: '20.9.143.123'  # Replace with your Nmap target
  scanPort : '3001'
  outputFile1: 'nmap-scan1.txt'
  outputFile2: 'nmap-vuln-scan.txt'
  outputFile3: 'nmap-scan3.txt'
  outputFile4: 'nmap-scan4.txt'

jobs:
- job: BuildAndDeploy
  displayName: 'Build and Deploy Docker Image'
  steps:
    - checkout: self
      displayName: 'Checkout Code'

    - task: NodeTool@0
      inputs:
        versionSpec: '18'
      displayName: 'Install Node.js'

    - script: |
        npm install
      displayName: 'Install dependencies'

    - script: |
        npm run build
      displayName: 'Build React app'

    - script: |
        sudo docker build -t $(dockerImageName) .
      displayName: 'Build Docker image'

    - script: |
        sudo docker save $(dockerImageName) -o $(imageTarFile)
      displayName: 'Save Docker image as artifact'
      
    - script: |
        sudo chmod 644 $(imageTarFile)
      displayName: 'Set correct permissions on Docker image file'

    - script: |
        mkdir -p $(Pipeline.Workspace)/tmp
        mv $(imageTarFile) $(Pipeline.Workspace)/tmp/
      displayName: 'Move Docker image to temporary directory'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: $(Pipeline.Workspace)/tmp/$(imageTarFile)
        artifactName: 'docker-image'
      displayName: 'Upload Docker image artifact'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'docker-image'
        downloadPath: '$(Pipeline.Workspace)'
      displayName: 'Download Docker image artifact'

    - script: |
        sudo docker load -i $(Pipeline.Workspace)/$(imageTarFile)
      displayName: 'Load Docker image'

    - script: |
        sudo docker tag $(dockerImageName) $(SERVER_IP)/$(dockerImageName):latest
      displayName: 'Tag Docker image'

    - script: |
        sudo apt-get install -y sshpass
        sudo sshpass -p azqhpassword123. scp -o StrictHostKeyChecking=no $(Pipeline.Workspace)/$(imageTarFile) $(SSH_USER)@$(SERVER_IP):$(serverPath)
      displayName: 'Push Docker image to server'

    - script: |
        sudo apt-get install -y sshpass
        sudo sshpass -p azqhpassword123. ssh -o StrictHostKeyChecking=no $(SSH_USER)@$(SERVER_IP) '
          sudo systemctl start docker || true
          if [ "$(docker ps -q -f name=my-react-container)" ]; then
            docker stop my-react-container
            docker rm my-react-container
          fi
          if [ "$(docker images -q my-react-app)" ]; then
            docker rmi my-react-app || true
          fi
          sudo docker load -i $(serverPath)
          sudo docker run -d --name my-react-container -p 3001:80 my-react-app || { echo "Failed to run container"; exit 1; }
          sudo docker logs my-react-container
        '
      displayName: 'Deploy to server'

- job: VulnerabilityScanning
  displayName: 'Run Vulnerability Scanning'
  steps:
    - script: |
        echo "Checking Docker Version:"
        docker --version
        echo "Pulling OWASP ZAP Docker Image:"
        docker pull zaproxy/zap-stable
        echo "Running OWASP ZAP Scan with Increased Timeout:"
        # Run OWASP ZAP scan using variables from the group with increased timeout
        docker run --rm -v $(Pipeline.Workspace):/zap/wrk/:rw -t zaproxy/zap-stable zap-full-scan.py -t "$(TARGET_URL)" -r /zap/wrk/"$(HTML_REPORT_NAME)" -x /zap/wrk/"$(XML_REPORT_NAME)" -z "-timeout 60000" || true
      displayName: 'Run OWASP ZAP Scan'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Pipeline.Workspace)/$(HTML_REPORT_NAME)'
        artifactName: 'ZAPReportHTML'
      displayName: 'Publish OWASP ZAP HTML Report'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Pipeline.Workspace)/$(XML_REPORT_NAME)'
        artifactName: 'ZAPReportXML'
      displayName: 'Publish OWASP ZAP XML Report'

    - script: |
        echo "Checking Docker Version:"
        docker --version
        echo "Pulling Nmap Docker Image:"
        docker pull instrumentisto/nmap
        echo "Running Nmap Scan with options: -T4 -F on $(nmapTarget)"
        # Run Nmap scan with options -T4 -F
        docker run --rm -v $(Pipeline.Workspace):/nmap/ instrumentisto/nmap -sV --version-all -T4 -F -p $(scanPort) -oN /nmap/$(outputFile1) $(nmapTarget) || true
        echo "Running Nmap Vulnerability Script Scan on $(nmapTarget)"
        # Run Nmap vulnerability script scan
        docker run --rm -v $(Pipeline.Workspace):/nmap/ instrumentisto/nmap --script vuln -oN /nmap/$(outputFile2) $(nmapTarget) || true
        echo "Running Nmap Primary Scan with options: -A on $(nmapTarget)"
        # Run Nmap primary scan with options -A
        docker run --rm -v $(Pipeline.Workspace):/nmap/ instrumentisto/nmap -A -oN /nmap/$(outputFile3) $(nmapTarget) || true
        echo "Running Nmap Version Detection Scan with options: -sV --version-all on $(nmapTarget)"
        # Run Nmap version detection scan with options -sV --version-all
        docker run --rm -v $(Pipeline.Workspace):/nmap/ instrumentisto/nmap -sV --version-all -oN /nmap/$(outputFile4) $(nmapTarget) || true
      displayName: 'Run Nmap Scans'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Pipeline.Workspace)/$(outputFile1)'
        artifactName: 'NmapScan1Results'
      displayName: 'Publish Nmap Scan 1 Results'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Pipeline.Workspace)/$(outputFile2)'
        artifactName: 'NmapScan2Results'
      displayName: 'Publish Nmap Vulnerability Script Scan Results'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Pipeline.Workspace)/$(outputFile3)'
        artifactName: 'NmapScan3Results'
      displayName: 'Publish Nmap Scan 3 Results'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Pipeline.Workspace)/$(outputFile4)'
        artifactName: 'NmapScan4Results'
      displayName: 'Publish Nmap Version Detection Scan Results'
